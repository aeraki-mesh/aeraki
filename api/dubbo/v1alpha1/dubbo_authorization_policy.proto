// Copyright Aeraki Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

import "google/api/field_behavior.proto";

// $schema: dubbo.aeraki.io.v1alpha1.DubboAuthorizationPolicy
// $title: Authorization Policy
// $description: Configuration for access control on Dubbo services.
//
// Dubbo Authorization Policy enables access control on Dubbo services in the mesh.
//
// Authorization policy supports DENY and ALLOW actions for access control. When DENY and ALLOW actions
// are used for a workload at the same time, the DENY action is evaluated first, then the ALLOW action.
// The evaluation is determined by the following rules:
//
// 1. If there are any DENY policies that match the request, deny the request.
// 2. If there are no ALLOW policies for the workload, allow the request.
// 3. If any of the ALLOW policies match the request, allow the request.
// 4. Deny the request.
//
// Here is an example of Dubbo Authorization Policy:
//
// It sets the `action` to "ALLOW" to create an allow policy. The default action is "ALLOW"
// but it is useful to be explicit in the policy.
//
// It allows requests from:
//
// - service account "cluster.local/ns/dubbo/sa/dubbo-consumer"
//
// to access the Dubbo service with:
//
// - "sayHello" method at interface "org.apache.dubbo.samples.basic.api.DemoService"
//
// Any other requests will be denied.
//
// ```yaml
// apiVersion: dubbo.aeraki.io/v1alpha1
// kind: DubboAuthorizationPolicy
// metadata:
//   name: demo
//   namespace: istio-system
// spec:
//   action: ALLOW
//   rules:
//   - from:
//     - source:
//         principals: ["cluster.local/ns/dubbo/sa/dubbo-consumer"]
//     to:
//     - operation:
//         interfaces: ["org.apache.dubbo.samples.basic.api.DemoService"]
//         methods: ["sayHello"]
// ```
//
// The following is another example that sets `action` to "DENY" to create a deny policy.
// It denies requests from the "dev" namespace to all the methods on all Interfaces
// in the "dubbo" namespace.
//
// ```yaml
// apiVersion: dubbo.aeraki.io/v1alpha1
// kind: DubboAuthorizationPolicy
// metadata:
//   name: demo
//   namespace: dubbo
// spec:
//   action: DENY
//   rules:
//   - from:
//     - source:
//         namespaces: ["dev"]
//     to:
//     - operation:
//         interfaces: ["*"]
//         methods: ["*"]
// ```

//
// Authorization Policy scope (target) is determined by "metadata/namespace" and
// an optional "selector".
//
// - "metadata/namespace" tells which namespace the policy applies. If set to root
// namespace, the policy applies to all namespaces in a mesh.
package dubbo.aeraki.io.v1alpha1;

option go_package = "github.com/aeraki-mesh/aeraki/api/dubbo/v1alpha1";

// DubboAuthorizationPolicy enables access control on Dubbo services.
//
// <!-- crd generation tags
// +cue-gen:DubboAuthorizationPolicy:groupName:dubbo.aeraki.io
// +cue-gen:DubboAuthorizationPolicy:version:v1alpha1
// +cue-gen:DubboAuthorizationPolicy:storageVersion
// +cue-gen:DubboAuthorizationPolicy:annotations:helm.sh/resource-policy=keep
// +cue-gen:DubboAuthorizationPolicy:labels:app=aeraki,chart=aeraki,heritage=Tiller,release=aeraki
// +cue-gen:DubboAuthorizationPolicy:subresource:status
// +cue-gen:DubboAuthorizationPolicy:scope:Namespaced
// +cue-gen:DubboAuthorizationPolicy:resource:categories=aeraki-io,dubbo-aeraki-io,plural=dubboauthorizationpolicies,shortNames=dap
// +cue-gen:DubboAuthorizationPolicy:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=dubbo.aeraki.io/v1alpha1
// +genclient
// +k8s:deepcopy-gen=true
// -->
message DubboAuthorizationPolicy {
  // Optional. A list of rules to match the request. A match occurs when at least
  // one rule matches the request.
  //
  // If not set, the match will never occur. This is equivalent to setting a
  // default of deny for the target workloads.
  repeated Rule rules = 2;

  // Action specifies the operation to take.
  enum Action {
    // Allow a request only if it matches the rules. This is the default type.
    ALLOW = 0;

    // Deny a request if it matches any of the rules.
    DENY = 1;
  }

  // Optional. The action to take if the request is matched with the rules.
  Action action = 3;
}

// Rule matches requests from a list of sources that perform a list of operations subject to a
// list of conditions. A match occurs when at least one source, one operation and all conditions
// matches the request. An empty rule is always matched.
//
// Any string field in the rule supports Exact, Prefix, Suffix and Presence match:
//
// - Exact match: "abc" will match on value "abc".
// - Prefix match: "abc*" will match on value "abc" and "abcd".
// - Suffix match: "*abc" will match on value "abc" and "xabc".
// - Presence match: "*" will match when value is not empty.
message Rule {
  // From includes a list or sources.
  message From {
    // Source specifies the source of a request.
    Source source = 1;
  }

  // Optional. from specifies the source of a request.
  //
  // If not set, any source is allowed.
  repeated From from = 1;

  // To includes a list or operations.
  message To {
    // Operation specifies the operation of a request.
    Operation operation = 1;
  }

  // Optional. to specifies the operation of a request.
  //
  // If not set, any operation is allowed.
  repeated To to = 2;
}

// Source specifies the source identities of a request. Fields in the source are
// ANDed together.
//
// For example, the following source matches if the principal is "admin" or "dev"
// and the namespace is "prod" or "test".
//
// ```yaml
// principals: ["admin", "dev"]
// namespaces: ["prod", "test"]
// ```
message Source {
  // Optional. A list of source peer identities (i.e. service account), which
  // matches to the "source.principal" attribute. This field requires mTLS enabled.
  //
  // If not set, any principal is allowed.
  repeated string principals = 1;

  // Optional. A list of negative match of source peer identities.
  repeated string not_principals = 2;

  // Optional. A list of namespaces, which matches to the "source.namespace"
  // attribute. This field requires mTLS enabled.
  //
  // If not set, any namespace is allowed.
  repeated string namespaces = 3;

  // Optional. A list of negative match of namespaces.
  repeated string not_namespaces = 4;
}

// Operation specifies the operations of a request. Fields in the operation are
// ANDed together.
//
// For example, the following operation matches if the Dubbo interface is "org.apache.dubbo.samples.basic.api.DemoService"
// and the method is "sayHello".
//
// ```yaml
// interfaces: ["org.apache.dubbo.samples.basic.api.DemoService"]
// methods: ["sayHello"]
// ```
message Operation {
  // Optional. A list of interfaces, which matches to the Dubbo interface.
  //
  // If not set, any interfaces is allowed.
  repeated string interfaces = 1;

  // Optional. A list of negative match of interfaces.
  repeated string not_interfaces = 5;

  // Optional. A list of methods, which matches to the Dubbo methods.
  //
  // If not set, any method is allowed.
  repeated string methods = 3;

  // Optional. A list of negative match of methods.
  repeated string not_methods = 7;
}