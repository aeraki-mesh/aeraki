// Copyright Aeraki Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

// $schema: metaprotocol.aeraki.io.v1alpha1.MetaRouter
// $title: MetaRouter
// $description: MetaRouter defines route policies for MetaProtocol proxy.
//
// MetaRouter defines route policies for MetaProtocol proxy.
// *Note*: Only one MetaRouter should be defined for a MetaProtocol service.
// If more than one MetaRouters are found for a service, Aeraki will choose
// a random one to apply to that service.
//
// *Note *: MetaRouter is a mesh-scoped resource, so no matter which namespace
// the MetaRouter is in, it will take effect on the services specified in the hosts.
//
// ```yaml
// apiVersion: metaprotocol.aeraki.io/v1alpha1
// kind: MetaRouter
// metadata:
//   name: attribute-based-route
//   namespace: istio-system
// spec:
//   hosts:
//   - org.apache.dubbo.samples.basic.api.demoservice
//   gateways:
//   - istio-system/ingress-gateway
//   routes:
//   - name: v1
//     match:
//       attributes:
//         interface:
//           exact: org.apache.dubbo.samples.basic.api.DemoService
//         method:
//           exact: sayHello
//     route:
//     - destination:
//         host: org.apache.dubbo.samples.basic.api.demoservice
//         subset: v1
//
// ```
//
// ```yaml
// apiVersion: metaprotocol.aeraki.io/v1alpha1
// kind: MetaRouter
// metadata:
//   name: traffic-splitting
// spec:
//   hosts:
//     - org.apache.dubbo.samples.basic.api.demoservice
//   routes:
//     - name: traffic-spilt
//       route:
//         - destination:
//             host: org.apache.dubbo.samples.basic.api.demoservice
//             subset: v1
//           weight: 20
//         - destination:
//             host: org.apache.dubbo.samples.basic.api.demoservice
//             subset: v2
//           weight: 80
package metaprotocol.aeraki.io.v1alpha1;

option go_package = "github.com/aeraki-mesh/aeraki/api/metaprotocol/v1alpha1";

// MetaRouter defines route policies for MetaProtocol proxy.
//
// <!-- crd generation tags
// +cue-gen:MetaRouter:groupName:metaprotocol.aeraki.io
// +cue-gen:MetaRouter:version:v1alpha1
// +cue-gen:MetaRouter:storageVersion
// +cue-gen:MetaRouter:annotations:helm.sh/resource-policy=keep
// +cue-gen:MetaRouter:labels:app=aeraki,chart=aeraki,heritage=Tiller,release=aeraki
// +cue-gen:MetaRouter:subresource:status
// +cue-gen:MetaRouter:scope:Namespaced
// +cue-gen:MetaRouter:resource:categories=aeraki-io,metaprotocol-aeraki-io
// +cue-gen:MetaRouter:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=metaprotocol.aeraki.io/v1alpha1
// +genclient
// +k8s:deepcopy-gen=true
// -->
message MetaRouter {
  // The destination service to which traffic is being sent.
  // *Note for Kubernetes users*: It must be a fully qualified domain name
  // (FQDN), (e.g. "thrift-sample-server.meta-thrift.svc.cluster.local" )
  // instead of a short name (e.g. "thrift-sample-server").
  // *Note*: Only one host is supported now. If multiple hosts are specified,
  // Only the first one takes effect.
  repeated string hosts = 1;
  // The names of gateways and sidecars that should apply these routes. The usage of
  //  this field is the same as istio.io/VirtualService
  repeated string gateways = 2;
  // An ordered list of route rules for MetaProtocol traffic. The route rules
  // will be applied to service ports named "tcp-metaprotocol-${applicationProtocol}-*",
  // (e.g. "tcp-metaprotocol-thrift-hello-server"). Order maters in the routes,
  // The first rule matching an incoming request is used.
  repeated MetaRoute routes = 3;
  // Loacal rate limit policy.
  LocalRateLimit local_rate_limit= 4;
  // Global rate limit policy.
  GlobalRateLimit global_rate_limit= 5;
  // A list of namespaces to which this MetaRouter is exported. Exporting a
  // MetaRouter allows it to be used by sidecars defined in other namespaces.
  // This feature provides a mechanism for service owners and mesh administrators
  // to control the visibility of MetaRouter across namespace boundaries.
  //
  // If no namespaces are specified then the MetaRouter is exported to all namespaces
  // by default.
  //
  // The value "." is reserved and defines an export to the same namespace that
  // the MetaRouter is declared in. Similarly the value "*" is reserved and
  // defines an export to all namespaces.
  repeated string export_to = 20;
}

// Describes match conditions and actions for routing MetaProtocol.
message MetaRoute {
  // The name assigned to the route for debugging purposes.
  string name = 1;

  // Match conditions to be satisfied for the rule to be activated.
  // All conditions inside a single match block have AND semantic.
  MetaRouteMatch match = 2;

  // A Route rule can forward (default) traffic. The forwarding target
  // can be one of several versions of a service (see glossary in
  // beginning of document). Weights associated with the service version
  // determine the proportion of traffic it receives.
  repeated MetaRouteDestination route = 3;

  //MetaFaultInjection fault = 4;

  Destination mirror = 5;

  // Percentage of the traffic to be mirrored by the `mirror` field.
  // If this field is absent, all the traffic (100%) will be mirrored.
  // Max value is 100.
  Percent mirror_percentage = 6;

  // Specifies a list of key-value pairs that should be mutated for each request. How to interpret the key-value pairs
  // depends on the codec implementation
  repeated KeyValue request_mutation = 19;

  // Specifies a list of key-value pairs that should be mutated for each response. How to interpret the key-value pairs
  // depends on the codec implementation
  repeated KeyValue response_mutation = 20;
}

// KeyValue defines a Key /value pair.
message KeyValue {
  // Key name.
  string key = 1 [(google.api.field_behavior) = REQUIRED];

  // alue.
  string value = 2 [(google.api.field_behavior) = REQUIRED];
}

message MetaRouteMatch {
    // If the value is empty and only the name of attribute is specified, presence of the attribute is checked.
    map<string, StringMatch> attributes = 1;
}

// Describes how to match a given string in HTTP headers. Match is
// case-sensitive.
message StringMatch {
  oneof match_type {

    // exact string match
    string exact = 1;

    // prefix-based match
    string prefix = 2;

    // RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
    string regex = 3;
  }
}

message MetaRouteDestination {
  // Destination uniquely identifies the instances of a service
  // to which the request/connection should be forwarded to.
  Destination destination = 1 [(google.api.field_behavior) = REQUIRED];

  // The proportion of traffic to be forwarded to the service
  // version. (0-100). Sum of weights across destinations SHOULD BE == 100.
  // If there is only one destination in a rule, the weight value is assumed to
  // be 100.
  uint32 weight = 2;

  // reserved 3 to 6;
  // reserved "remove_response_headers", "append_response_headers", "remove_request_headers", "append_request_headers";

  // Header manipulation rules
  // Headers headers = 7;
}

message Destination {
  // The name of a service from the service registry. Service
  // names are looked up from the platform's service registry (e.g.,
  // Kubernetes services, Consul services, etc.) and from the hosts
  // declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry). Traffic
  // forwarded to destinations that are not found in either of the two, will be dropped.
  //
  // *Note for Kubernetes users*: When short names are used (e.g. "reviews"
  // instead of "reviews.default.svc.cluster.local"), Istio will interpret
  // the short name based on the namespace of the rule, not the service. A
  // rule in the "default" namespace containing a host "reviews will be
  // interpreted as "reviews.default.svc.cluster.local", irrespective of
  // the actual namespace associated with the reviews service. To avoid
  // potential misconfiguration, it is recommended to always use fully
  // qualified domain names over short names.
  string host = 1 [(google.api.field_behavior) = REQUIRED];

  // The name of a subset within the service. Applicable only to services
  // within the mesh. The subset must be defined in a corresponding
  // DestinationRule.
  string subset = 2;

  // Specifies the port on the host that is being addressed. If a service
  // exposes only a single port it is not required to explicitly select the
  // port.
  PortSelector port = 3;
}

// PortSelector specifies the number of a port to be used for
// matching or selection for final routing.
message PortSelector {
  // Valid port number
  uint32 number = 1;

  reserved 2;
  reserved "name";
}

// LocalRateLimit defines local rate limit policies for MetaProtocol proxy
message LocalRateLimit {
  // Configures a token bucket which is used for rate limiting.
  message TokenBucket {
    // The maximum tokens that the bucket can hold. This is also the number of tokens that the bucket
    // initially contains. The value must be greater than 0.
    uint32 max_tokens = 1;

    // The number of tokens added to the bucket during each fill interval. The value must be greater than 0.
    //If not specified, defaults to a single token.
    google.protobuf.UInt32Value tokens_per_fill = 2;

    // The fill interval that tokens are added to the bucket. During each fill interval
    // `tokens_per_fill` are added to the bucket. The bucket will never contain more than
    // `max_tokens` tokens.
    google.protobuf.Duration fill_interval = 3 [(google.api.field_behavior) = REQUIRED];
  }

  // Condition defines a rate limit policy for a more specific condition
  message Condition {
    // Match conditions to be satisfied for the rate limit rule to be activated.
    // All conditions inside a single match block have AND semantic.
    // If the match is not specified, then all the incoming requests will be considered matched.
    MetaRouteMatch match = 1 [(google.api.field_behavior) = REQUIRED];

    // The token bucket for this particular condition
    TokenBucket token_bucket = 2 [(google.api.field_behavior) = REQUIRED];
  }

  // The default token bucket configuration to use for rate limiting requests that are processed by
  // this filter.
  // Local rate limiter will first check the conditions, if a specific condition matches, then the token
  // bucket within that condition will be applied to the incoming request. All the other requests
  // that don't match the conditions will be rate limited by the default token bucket.
  // If the default token bucket is not specified, then the requests that don't match the conditions
  // will not be rate limited.
  // At least one of token_bucket or conditions should have value.
  LocalRateLimit.TokenBucket token_bucket = 1;

  // The more specific rate limit conditions, the first match will be used.
  repeated LocalRateLimit.Condition conditions = 2;
}

// GlobalRateLimit configures global rate limit service for MetaProtocol proxy
message GlobalRateLimit {

  // Descriptor defines the mapping between the property in the request and the descriptor key in the rate
  // limit server configuration
  // Normally the property is the same as the descriptor key, but adding a mapping layer allows more flexibility
  message Descriptor {
    // The property extracted from the requests
    string property = 1 [(google.api.field_behavior) = REQUIRED];

    // The corresponding descriptor key in the rate limit server configuration
    string descriptor_key = 2 [(google.api.field_behavior) = REQUIRED];
  }

  // Match conditions to be satisfied for the rate limit rule to be activated.
  // All conditions inside a single match block have AND semantic.
  // If the match is not specified, then all the incoming requests will be considered matched.
  MetaRouteMatch match = 1 [(google.api.field_behavior) = REQUIRED];

  // The rate limit domain to use when calling the rate limit service.
  string domain = 2 [(google.api.field_behavior) = REQUIRED];

  // The timeout in milliseconds for the rate limit service RPC. If not
  // set, this defaults to 20ms.
  google.protobuf.Duration request_timeout = 3;

  // The filter's behavior in case the rate limiting service does
  // not respond back. When it is set to true, Envoy will not allow traffic in case of
  // communication failure between rate limiting service and the proxy.
  bool deny_on_fail = 4;

  // The cluster name of the external rate limit service provider.
  string rate_limit_service = 5 [(google.api.field_behavior) = REQUIRED];

  // Defines what properties in the requests should be sent to the rate limit service
  repeated GlobalRateLimit.Descriptor descriptors = 6 [(google.api.field_behavior) = REQUIRED];
}

// Percent specifies a percentage in the range of [0.0, 100.0].
message Percent {
  double value = 1;
}