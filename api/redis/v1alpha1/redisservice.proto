syntax = "proto3";
import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "google/api/field_behavior.proto";
import "api/redis/v1alpha1/redisdestination.proto";

// $schema: redis.aeraki.io.v1alpha1.RedisService
// $title: Redis Service
// $description: Istio Redis Service Extension.

// `RedisService` provide a way to config redis service in service mesh.
package redis.aeraki.io.v1alpha1;

option go_package = "github.com/aeraki-mesh/aeraki/api/redis/v1alpha1";

// RedisService provide a way to config redis service in service mesh.
//
// <!-- crd generation tags
// +cue-gen:RedisService:groupName:redis.aeraki.io
// +cue-gen:RedisService:version:v1alpha1
// +cue-gen:RedisService:storageVersion
// +cue-gen:RedisService:subresource:status
// +cue-gen:RedisService:scope:Namespaced
// +cue-gen:RedisService:resource:categories=redis-aeraki-io,shortNames=rsvc
// +cue-gen:RedisService:printerColumn:name=Hosts,type=string,JSONPath=.spec.hosts,description="The destination hosts to which traffic is being sent"
// +cue-gen:RedisService:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp
// representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
// +cue-gen:RedisService:preserveUnknownFields:true
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=redis.aeraki.io/v1alpha1
// +genclient
// +k8s:deepcopy-gen=true
// -->
message RedisService {

    enum ReadPolicy {
        MASTER = 0;
        PREFER_MASTER = 1;
        REPLICA = 2;
        PREFER_REPLICA = 3;
        ANY = 4;
    }

    message Settings {

        // Indicates that prefix matching should be case insensitive.
        bool case_insensitive = 1;

        // Per-operation timeout in milliseconds. The timer starts when the first
        // command of a pipeline is written to the backend connection. Each response received from Redis
        // resets the timer since it signifies that the next command is being processed by the backend.
        // The only exception to this behavior is when a connection to a backend is not yet established.
        // In that case, the connect timeout on the cluster will govern the timeout until the connection
        // is ready.
        google.protobuf.Duration op_timeout = 2;

        // Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
        // count
        bool enable_command_stats = 3;

        // Maximum size of encoded request buffer before flush is triggered and encoded requests
        // are sent upstream. If this is unset, the buffer flushes whenever it receives data
        // and performs no batching.
        // This feature makes it possible for multiple clients to send requests to Envoy and have
        // them batched- for example if one is running several worker processes, each with its own
        // Redis connection. There is no benefit to using this with a single downstream process.
        // Recommended size (if enabled) is 1024 bytes.
        uint32 max_buffer_size_before_flush = 4;

        // The encoded request buffer is flushed N milliseconds after the first request has been
        // encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
        // If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
        // the timer should be set according to the number of clients, overall request rate and
        // desired maximum latency for a single command. For example, if there are many requests
        // being batched together at a high rate, the buffer will likely be filled before the timer
        // fires. Alternatively, if the request rate is lower the buffer will not be filled as often
        // before the timer fires.
        // If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
        // defaults to 3ms.
        google.protobuf.Duration buffer_flush_timeout = 5;

        // `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
        // can be created at any given time by any given worker thread (see `enable_redirection` for
        // more details). If the host is unknown and a connection cannot be created due to enforcing
        // this limit, then redirection will fail and the original redirection error will be passed
        // downstream unchanged. This limit defaults to 100.
        google.protobuf.UInt32Value max_upstream_unknown_connections = 6;

        // Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
        // forwarded to the same upstream. The hash key used for determining the upstream in a
        // consistent hash ring configuration will be computed from the hash tagged key instead of the
        // whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
        // implementation <https://redis.io/topics/cluster-spec#keys-hash-tags>`_.
        //
        // Examples:
        //
        // * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
        // * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
        bool enable_hashtagging = 7;

        // Accept `moved and ask redirection
        // <https://redis.io/topics/cluster-spec#redirection-and-resharding>`_ errors from upstream
        // redis servers, and retry commands to the specified target server. The target server does not
        // need to be known to the cluster manager. If the command cannot be redirected, then the
        // original error is passed downstream unchanged. By default, this support is not enabled.
        bool enable_redirection = 8;

        // Read policy. The default is to read from the primary.
        ReadPolicy read_policy = 9;
        // Downstream auth.
        Auth auth = 10;
    }

    // KeyMatch match the redis key prefix;
    message KeyMatch {
        // String prefix that must match the beginning of the keys. Envoy will always favor the
        // longest match.
        string prefix = 1;

        // Indicates if the prefix needs to be removed from the key when forwarded.
        bool remove_prefix = 2;
    }

    message RouteMatch {
        oneof match {
            KeyMatch key = 1;
        }
    }

    message Destination {
        string host = 1 [(google.api.field_behavior) = REQUIRED];
        uint32 port = 2;
    }

    message Mirror {
        Destination route = 1;
        Percent percentage = 2;
        bool exclude_read_commands = 3;
    }

    message Route {
        RouteMatch match = 1;
        Destination route = 2;
        repeated Mirror mirror = 3;
    }

    repeated string host = 1 [(google.api.field_behavior) = REQUIRED];

    Settings settings = 2;

    repeated Route redis = 3 [(google.api.field_behavior) = REQUIRED];

    // List of faults to inject. Faults currently come in two flavors:
    // - Delay, which delays a request.
    // - Error, which responds to a request with an error. Errors can also have delays attached.
    repeated Fault faults = 4;
}

// Percent specifies a percentage in the range of [0.0, 100.0].
message Percent {
    double value = 1;
}

// Fault defines redis faults used for fault injection.
message Fault {
    enum Type {
        // Delays requests. This is the base fault; other faults can have delays added.
        DELAY = 0;
        // Returns errors on requests.
        ERROR = 1;
    }

    // Fault type.
    Type type = 1;

    // Percentage of requests fault applies to.
    Percent percentage = 2;

    // Delay for all faults. If not set, defaults to zero
    google.protobuf.Duration delay = 3;

    // Commands fault is restricted to, if any. If not set, fault applies to all commands
    // other than auth and ping (due to special handling of those commands in Envoy).
    repeated string commands = 4;
}