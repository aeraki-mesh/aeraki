// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/redis/v1alpha1/redisservice.proto

// `RedisService` provide a way to config redis service in service mesh.

package v1alpha1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RedisService_ReadPolicy int32

const (
	RedisService_MASTER         RedisService_ReadPolicy = 0
	RedisService_PREFER_MASTER  RedisService_ReadPolicy = 1
	RedisService_REPLICA        RedisService_ReadPolicy = 2
	RedisService_PREFER_REPLICA RedisService_ReadPolicy = 3
	RedisService_ANY            RedisService_ReadPolicy = 4
)

var RedisService_ReadPolicy_name = map[int32]string{
	0: "MASTER",
	1: "PREFER_MASTER",
	2: "REPLICA",
	3: "PREFER_REPLICA",
	4: "ANY",
}

var RedisService_ReadPolicy_value = map[string]int32{
	"MASTER":         0,
	"PREFER_MASTER":  1,
	"REPLICA":        2,
	"PREFER_REPLICA": 3,
	"ANY":            4,
}

func (x RedisService_ReadPolicy) String() string {
	return proto.EnumName(RedisService_ReadPolicy_name, int32(x))
}

func (RedisService_ReadPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{0, 0}
}

type Fault_Type int32

const (
	// Delays requests. This is the base fault; other faults can have delays added.
	Fault_DELAY Fault_Type = 0
	// Returns errors on requests.
	Fault_ERROR Fault_Type = 1
)

var Fault_Type_name = map[int32]string{
	0: "DELAY",
	1: "ERROR",
}

var Fault_Type_value = map[string]int32{
	"DELAY": 0,
	"ERROR": 1,
}

func (x Fault_Type) String() string {
	return proto.EnumName(Fault_Type_name, int32(x))
}

func (Fault_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{2, 0}
}

// RedisService provide a way to config redis service in service mesh.
//
// <!-- crd generation tags
// +cue-gen:RedisService:groupName:redis.aeraki.io
// +cue-gen:RedisService:version:v1alpha1
// +cue-gen:RedisService:storageVersion
// +cue-gen:RedisService:subresource:status
// +cue-gen:RedisService:scope:Namespaced
// +cue-gen:RedisService:resource:categories=redis-aeraki-io,shortNames=rsvc
// +cue-gen:RedisService:printerColumn:name=Hosts,type=string,JSONPath=.spec.hosts,description="The destination hosts to which traffic is being sent"
// +cue-gen:RedisService:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp
// representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
// +cue-gen:RedisService:preserveUnknownFields:true
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=redis.aeraki.io/v1alpha1
// +genclient
// +k8s:deepcopy-gen=true
// -->
type RedisService struct {
	Host     []string               `protobuf:"bytes,1,rep,name=host,proto3" json:"host,omitempty"`
	Settings *RedisService_Settings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	Redis    []*RedisService_Route  `protobuf:"bytes,3,rep,name=redis,proto3" json:"redis,omitempty"`
	// List of faults to inject. Faults currently come in two flavors:
	// - Delay, which delays a request.
	// - Error, which responds to a request with an error. Errors can also have delays attached.
	Faults               []*Fault `protobuf:"bytes,4,rep,name=faults,proto3" json:"faults,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisService) Reset()         { *m = RedisService{} }
func (m *RedisService) String() string { return proto.CompactTextString(m) }
func (*RedisService) ProtoMessage()    {}
func (*RedisService) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{0}
}
func (m *RedisService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisService.Merge(m, src)
}
func (m *RedisService) XXX_Size() int {
	return m.Size()
}
func (m *RedisService) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisService.DiscardUnknown(m)
}

var xxx_messageInfo_RedisService proto.InternalMessageInfo

func (m *RedisService) GetHost() []string {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *RedisService) GetSettings() *RedisService_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *RedisService) GetRedis() []*RedisService_Route {
	if m != nil {
		return m.Redis
	}
	return nil
}

func (m *RedisService) GetFaults() []*Fault {
	if m != nil {
		return m.Faults
	}
	return nil
}

type RedisService_Settings struct {
	// Indicates that prefix matching should be case insensitive.
	CaseInsensitive bool `protobuf:"varint,1,opt,name=case_insensitive,json=caseInsensitive,proto3" json:"case_insensitive,omitempty"`
	// Per-operation timeout in milliseconds. The timer starts when the first
	// command of a pipeline is written to the backend connection. Each response received from Redis
	// resets the timer since it signifies that the next command is being processed by the backend.
	// The only exception to this behavior is when a connection to a backend is not yet established.
	// In that case, the connect timeout on the cluster will govern the timeout until the connection
	// is ready.
	OpTimeout *types.Duration `protobuf:"bytes,2,opt,name=op_timeout,json=opTimeout,proto3" json:"op_timeout,omitempty"`
	// Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
	// count
	EnableCommandStats bool `protobuf:"varint,3,opt,name=enable_command_stats,json=enableCommandStats,proto3" json:"enable_command_stats,omitempty"`
	// Maximum size of encoded request buffer before flush is triggered and encoded requests
	// are sent upstream. If this is unset, the buffer flushes whenever it receives data
	// and performs no batching.
	// This feature makes it possible for multiple clients to send requests to Envoy and have
	// them batched- for example if one is running several worker processes, each with its own
	// Redis connection. There is no benefit to using this with a single downstream process.
	// Recommended size (if enabled) is 1024 bytes.
	MaxBufferSizeBeforeFlush uint32 `protobuf:"varint,4,opt,name=max_buffer_size_before_flush,json=maxBufferSizeBeforeFlush,proto3" json:"max_buffer_size_before_flush,omitempty"`
	// The encoded request buffer is flushed N milliseconds after the first request has been
	// encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
	// If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
	// the timer should be set according to the number of clients, overall request rate and
	// desired maximum latency for a single command. For example, if there are many requests
	// being batched together at a high rate, the buffer will likely be filled before the timer
	// fires. Alternatively, if the request rate is lower the buffer will not be filled as often
	// before the timer fires.
	// If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
	// defaults to 3ms.
	BufferFlushTimeout *types.Duration `protobuf:"bytes,5,opt,name=buffer_flush_timeout,json=bufferFlushTimeout,proto3" json:"buffer_flush_timeout,omitempty"`
	// `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
	// can be created at any given time by any given worker thread (see `enable_redirection` for
	// more details). If the host is unknown and a connection cannot be created due to enforcing
	// this limit, then redirection will fail and the original redirection error will be passed
	// downstream unchanged. This limit defaults to 100.
	MaxUpstreamUnknownConnections *types.UInt32Value `protobuf:"bytes,6,opt,name=max_upstream_unknown_connections,json=maxUpstreamUnknownConnections,proto3" json:"max_upstream_unknown_connections,omitempty"`
	// Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
	// forwarded to the same upstream. The hash key used for determining the upstream in a
	// consistent hash ring configuration will be computed from the hash tagged key instead of the
	// whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
	// implementation <https://redis.io/topics/cluster-spec#keys-hash-tags>`_.
	//
	// Examples:
	//
	// * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
	// * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
	EnableHashtagging bool `protobuf:"varint,7,opt,name=enable_hashtagging,json=enableHashtagging,proto3" json:"enable_hashtagging,omitempty"`
	// Accept `moved and ask redirection
	// <https://redis.io/topics/cluster-spec#redirection-and-resharding>`_ errors from upstream
	// redis servers, and retry commands to the specified target server. The target server does not
	// need to be known to the cluster manager. If the command cannot be redirected, then the
	// original error is passed downstream unchanged. By default, this support is not enabled.
	EnableRedirection bool `protobuf:"varint,8,opt,name=enable_redirection,json=enableRedirection,proto3" json:"enable_redirection,omitempty"`
	// Read policy. The default is to read from the primary.
	ReadPolicy RedisService_ReadPolicy `protobuf:"varint,9,opt,name=read_policy,json=readPolicy,proto3,enum=redis.aeraki.io.v1alpha1.RedisService_ReadPolicy" json:"read_policy,omitempty"`
	// Downstream auth.
	Auth                 *Auth    `protobuf:"bytes,10,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisService_Settings) Reset()         { *m = RedisService_Settings{} }
func (m *RedisService_Settings) String() string { return proto.CompactTextString(m) }
func (*RedisService_Settings) ProtoMessage()    {}
func (*RedisService_Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{0, 0}
}
func (m *RedisService_Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisService_Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisService_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisService_Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisService_Settings.Merge(m, src)
}
func (m *RedisService_Settings) XXX_Size() int {
	return m.Size()
}
func (m *RedisService_Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisService_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_RedisService_Settings proto.InternalMessageInfo

func (m *RedisService_Settings) GetCaseInsensitive() bool {
	if m != nil {
		return m.CaseInsensitive
	}
	return false
}

func (m *RedisService_Settings) GetOpTimeout() *types.Duration {
	if m != nil {
		return m.OpTimeout
	}
	return nil
}

func (m *RedisService_Settings) GetEnableCommandStats() bool {
	if m != nil {
		return m.EnableCommandStats
	}
	return false
}

func (m *RedisService_Settings) GetMaxBufferSizeBeforeFlush() uint32 {
	if m != nil {
		return m.MaxBufferSizeBeforeFlush
	}
	return 0
}

func (m *RedisService_Settings) GetBufferFlushTimeout() *types.Duration {
	if m != nil {
		return m.BufferFlushTimeout
	}
	return nil
}

func (m *RedisService_Settings) GetMaxUpstreamUnknownConnections() *types.UInt32Value {
	if m != nil {
		return m.MaxUpstreamUnknownConnections
	}
	return nil
}

func (m *RedisService_Settings) GetEnableHashtagging() bool {
	if m != nil {
		return m.EnableHashtagging
	}
	return false
}

func (m *RedisService_Settings) GetEnableRedirection() bool {
	if m != nil {
		return m.EnableRedirection
	}
	return false
}

func (m *RedisService_Settings) GetReadPolicy() RedisService_ReadPolicy {
	if m != nil {
		return m.ReadPolicy
	}
	return RedisService_MASTER
}

func (m *RedisService_Settings) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

// KeyMatch match the redis key prefix;
type RedisService_KeyMatch struct {
	// String prefix that must match the beginning of the keys. Envoy will always favor the
	// longest match.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Indicates if the prefix needs to be removed from the key when forwarded.
	RemovePrefix         bool     `protobuf:"varint,2,opt,name=remove_prefix,json=removePrefix,proto3" json:"remove_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisService_KeyMatch) Reset()         { *m = RedisService_KeyMatch{} }
func (m *RedisService_KeyMatch) String() string { return proto.CompactTextString(m) }
func (*RedisService_KeyMatch) ProtoMessage()    {}
func (*RedisService_KeyMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{0, 1}
}
func (m *RedisService_KeyMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisService_KeyMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisService_KeyMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisService_KeyMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisService_KeyMatch.Merge(m, src)
}
func (m *RedisService_KeyMatch) XXX_Size() int {
	return m.Size()
}
func (m *RedisService_KeyMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisService_KeyMatch.DiscardUnknown(m)
}

var xxx_messageInfo_RedisService_KeyMatch proto.InternalMessageInfo

func (m *RedisService_KeyMatch) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *RedisService_KeyMatch) GetRemovePrefix() bool {
	if m != nil {
		return m.RemovePrefix
	}
	return false
}

type RedisService_RouteMatch struct {
	// Types that are valid to be assigned to Match:
	//	*RedisService_RouteMatch_Key
	Match                isRedisService_RouteMatch_Match `protobuf_oneof:"match"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *RedisService_RouteMatch) Reset()         { *m = RedisService_RouteMatch{} }
func (m *RedisService_RouteMatch) String() string { return proto.CompactTextString(m) }
func (*RedisService_RouteMatch) ProtoMessage()    {}
func (*RedisService_RouteMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{0, 2}
}
func (m *RedisService_RouteMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisService_RouteMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisService_RouteMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisService_RouteMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisService_RouteMatch.Merge(m, src)
}
func (m *RedisService_RouteMatch) XXX_Size() int {
	return m.Size()
}
func (m *RedisService_RouteMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisService_RouteMatch.DiscardUnknown(m)
}

var xxx_messageInfo_RedisService_RouteMatch proto.InternalMessageInfo

type isRedisService_RouteMatch_Match interface {
	isRedisService_RouteMatch_Match()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RedisService_RouteMatch_Key struct {
	Key *RedisService_KeyMatch `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (*RedisService_RouteMatch_Key) isRedisService_RouteMatch_Match() {}

func (m *RedisService_RouteMatch) GetMatch() isRedisService_RouteMatch_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *RedisService_RouteMatch) GetKey() *RedisService_KeyMatch {
	if x, ok := m.GetMatch().(*RedisService_RouteMatch_Key); ok {
		return x.Key
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RedisService_RouteMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RedisService_RouteMatch_Key)(nil),
	}
}

type RedisService_Destination struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisService_Destination) Reset()         { *m = RedisService_Destination{} }
func (m *RedisService_Destination) String() string { return proto.CompactTextString(m) }
func (*RedisService_Destination) ProtoMessage()    {}
func (*RedisService_Destination) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{0, 3}
}
func (m *RedisService_Destination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisService_Destination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisService_Destination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisService_Destination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisService_Destination.Merge(m, src)
}
func (m *RedisService_Destination) XXX_Size() int {
	return m.Size()
}
func (m *RedisService_Destination) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisService_Destination.DiscardUnknown(m)
}

var xxx_messageInfo_RedisService_Destination proto.InternalMessageInfo

func (m *RedisService_Destination) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RedisService_Destination) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type RedisService_Mirror struct {
	Route                *RedisService_Destination `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Percentage           *Percent                  `protobuf:"bytes,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	ExcludeReadCommands  bool                      `protobuf:"varint,3,opt,name=exclude_read_commands,json=excludeReadCommands,proto3" json:"exclude_read_commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RedisService_Mirror) Reset()         { *m = RedisService_Mirror{} }
func (m *RedisService_Mirror) String() string { return proto.CompactTextString(m) }
func (*RedisService_Mirror) ProtoMessage()    {}
func (*RedisService_Mirror) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{0, 4}
}
func (m *RedisService_Mirror) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisService_Mirror) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisService_Mirror.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisService_Mirror) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisService_Mirror.Merge(m, src)
}
func (m *RedisService_Mirror) XXX_Size() int {
	return m.Size()
}
func (m *RedisService_Mirror) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisService_Mirror.DiscardUnknown(m)
}

var xxx_messageInfo_RedisService_Mirror proto.InternalMessageInfo

func (m *RedisService_Mirror) GetRoute() *RedisService_Destination {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *RedisService_Mirror) GetPercentage() *Percent {
	if m != nil {
		return m.Percentage
	}
	return nil
}

func (m *RedisService_Mirror) GetExcludeReadCommands() bool {
	if m != nil {
		return m.ExcludeReadCommands
	}
	return false
}

type RedisService_Route struct {
	Match                *RedisService_RouteMatch  `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Route                *RedisService_Destination `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	Mirror               []*RedisService_Mirror    `protobuf:"bytes,3,rep,name=mirror,proto3" json:"mirror,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RedisService_Route) Reset()         { *m = RedisService_Route{} }
func (m *RedisService_Route) String() string { return proto.CompactTextString(m) }
func (*RedisService_Route) ProtoMessage()    {}
func (*RedisService_Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{0, 5}
}
func (m *RedisService_Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisService_Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisService_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisService_Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisService_Route.Merge(m, src)
}
func (m *RedisService_Route) XXX_Size() int {
	return m.Size()
}
func (m *RedisService_Route) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisService_Route.DiscardUnknown(m)
}

var xxx_messageInfo_RedisService_Route proto.InternalMessageInfo

func (m *RedisService_Route) GetMatch() *RedisService_RouteMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *RedisService_Route) GetRoute() *RedisService_Destination {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *RedisService_Route) GetMirror() []*RedisService_Mirror {
	if m != nil {
		return m.Mirror
	}
	return nil
}

// Percent specifies a percentage in the range of [0.0, 100.0].
type Percent struct {
	Value                float64  `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Percent) Reset()         { *m = Percent{} }
func (m *Percent) String() string { return proto.CompactTextString(m) }
func (*Percent) ProtoMessage()    {}
func (*Percent) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{1}
}
func (m *Percent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Percent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Percent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Percent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Percent.Merge(m, src)
}
func (m *Percent) XXX_Size() int {
	return m.Size()
}
func (m *Percent) XXX_DiscardUnknown() {
	xxx_messageInfo_Percent.DiscardUnknown(m)
}

var xxx_messageInfo_Percent proto.InternalMessageInfo

func (m *Percent) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Fault defines redis faults used for fault injection.
type Fault struct {
	// Fault type.
	Type Fault_Type `protobuf:"varint,1,opt,name=type,proto3,enum=redis.aeraki.io.v1alpha1.Fault_Type" json:"type,omitempty"`
	// Percentage of requests fault applies to.
	Percentage *Percent `protobuf:"bytes,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Delay for all faults. If not set, defaults to zero
	Delay *types.Duration `protobuf:"bytes,3,opt,name=delay,proto3" json:"delay,omitempty"`
	// Commands fault is restricted to, if any. If not set, fault applies to all commands
	// other than auth and ping (due to special handling of those commands in Envoy).
	Commands             []string `protobuf:"bytes,4,rep,name=commands,proto3" json:"commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fault) Reset()         { *m = Fault{} }
func (m *Fault) String() string { return proto.CompactTextString(m) }
func (*Fault) ProtoMessage()    {}
func (*Fault) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdd8295f47f99c5, []int{2}
}
func (m *Fault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fault.Merge(m, src)
}
func (m *Fault) XXX_Size() int {
	return m.Size()
}
func (m *Fault) XXX_DiscardUnknown() {
	xxx_messageInfo_Fault.DiscardUnknown(m)
}

var xxx_messageInfo_Fault proto.InternalMessageInfo

func (m *Fault) GetType() Fault_Type {
	if m != nil {
		return m.Type
	}
	return Fault_DELAY
}

func (m *Fault) GetPercentage() *Percent {
	if m != nil {
		return m.Percentage
	}
	return nil
}

func (m *Fault) GetDelay() *types.Duration {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *Fault) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func init() {
	proto.RegisterEnum("redis.aeraki.io.v1alpha1.RedisService_ReadPolicy", RedisService_ReadPolicy_name, RedisService_ReadPolicy_value)
	proto.RegisterEnum("redis.aeraki.io.v1alpha1.Fault_Type", Fault_Type_name, Fault_Type_value)
	proto.RegisterType((*RedisService)(nil), "redis.aeraki.io.v1alpha1.RedisService")
	proto.RegisterType((*RedisService_Settings)(nil), "redis.aeraki.io.v1alpha1.RedisService.Settings")
	proto.RegisterType((*RedisService_KeyMatch)(nil), "redis.aeraki.io.v1alpha1.RedisService.KeyMatch")
	proto.RegisterType((*RedisService_RouteMatch)(nil), "redis.aeraki.io.v1alpha1.RedisService.RouteMatch")
	proto.RegisterType((*RedisService_Destination)(nil), "redis.aeraki.io.v1alpha1.RedisService.Destination")
	proto.RegisterType((*RedisService_Mirror)(nil), "redis.aeraki.io.v1alpha1.RedisService.Mirror")
	proto.RegisterType((*RedisService_Route)(nil), "redis.aeraki.io.v1alpha1.RedisService.Route")
	proto.RegisterType((*Percent)(nil), "redis.aeraki.io.v1alpha1.Percent")
	proto.RegisterType((*Fault)(nil), "redis.aeraki.io.v1alpha1.Fault")
}

func init() {
	proto.RegisterFile("api/redis/v1alpha1/redisservice.proto", fileDescriptor_abdd8295f47f99c5)
}

var fileDescriptor_abdd8295f47f99c5 = []byte{
	// 971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0x37, 0x3f, 0x4d, 0x4e, 0x7f, 0xc8, 0x0e, 0x05, 0x4c, 0x54, 0xda, 0x50, 0x40, 0xca,
	0x4a, 0xd4, 0xa1, 0x59, 0x21, 0x56, 0x5c, 0x20, 0xa5, 0x6d, 0xba, 0xad, 0xba, 0x85, 0x6a, 0xda,
	0x22, 0xed, 0xde, 0x58, 0x13, 0x7b, 0x12, 0x8f, 0x6a, 0x7b, 0xac, 0xf1, 0x38, 0x6d, 0xf6, 0x09,
	0xe1, 0x8e, 0x07, 0xe0, 0x62, 0xe9, 0x0b, 0xf0, 0x00, 0xdc, 0xa0, 0xf9, 0x49, 0x13, 0x58, 0x85,
	0x2d, 0x82, 0x3b, 0xcf, 0xf9, 0xbe, 0xf3, 0xf9, 0xf3, 0x99, 0x73, 0x8e, 0xe1, 0x0b, 0x92, 0xb1,
	0x8e, 0xa0, 0x21, 0xcb, 0x3b, 0xe3, 0x3d, 0x12, 0x67, 0x11, 0xd9, 0x33, 0xc7, 0x9c, 0x8a, 0x31,
	0x0b, 0xa8, 0x97, 0x09, 0x2e, 0x39, 0x72, 0x75, 0xcc, 0x23, 0x54, 0x90, 0x6b, 0xe6, 0x31, 0xee,
	0x4d, 0xc9, 0xcd, 0xcd, 0x11, 0xe7, 0xa3, 0x98, 0x76, 0x34, 0x6f, 0x50, 0x0c, 0x3b, 0xb9, 0x14,
	0x45, 0x20, 0x4d, 0x5e, 0x73, 0xeb, 0xef, 0x68, 0x58, 0x08, 0x22, 0x19, 0x4f, 0x17, 0xe1, 0x37,
	0x82, 0x64, 0x19, 0x15, 0xb9, 0xc5, 0xb7, 0x2d, 0xae, 0x5c, 0x0e, 0x19, 0x8d, 0x43, 0x7f, 0x40,
	0x23, 0x32, 0x66, 0x5c, 0x58, 0xc2, 0x93, 0x45, 0xfe, 0x43, 0x9a, 0x4b, 0x96, 0xce, 0xbd, 0x6b,
	0xe7, 0xd7, 0x55, 0x58, 0xc5, 0x0a, 0xba, 0x30, 0x9f, 0x86, 0x3e, 0x82, 0x72, 0xc4, 0x73, 0xe9,
	0x3a, 0xad, 0x52, 0xbb, 0xbe, 0x5f, 0x7a, 0xd3, 0x5b, 0xc2, 0x3a, 0x80, 0x4e, 0xa1, 0x96, 0x53,
	0x29, 0x59, 0x3a, 0xca, 0xdd, 0xa5, 0x96, 0xd3, 0x5e, 0xe9, 0x76, 0xbc, 0x45, 0x05, 0xf0, 0xe6,
	0x25, 0xbd, 0x0b, 0x9b, 0x86, 0xef, 0x05, 0xd0, 0x73, 0xa8, 0xe8, 0x5c, 0xb7, 0xd4, 0x2a, 0xb5,
	0x57, 0xba, 0x5f, 0x3e, 0x50, 0x09, 0xf3, 0x42, 0x52, 0x63, 0xca, 0xe4, 0xa3, 0x6f, 0xa0, 0x3a,
	0x24, 0x45, 0x2c, 0x73, 0xb7, 0xac, 0x95, 0xb6, 0x17, 0x2b, 0x1d, 0x29, 0x1e, 0xb6, 0xf4, 0xe6,
	0x1f, 0x65, 0xa8, 0x4d, 0x8d, 0xa1, 0x27, 0xd0, 0x08, 0x48, 0x4e, 0x7d, 0x96, 0xe6, 0x34, 0xcd,
	0x99, 0x64, 0x63, 0xea, 0x3a, 0x2d, 0xa7, 0x5d, 0xc3, 0xef, 0xa9, 0xf8, 0xc9, 0x2c, 0x8c, 0x9e,
	0x01, 0xf0, 0xcc, 0x97, 0x2c, 0xa1, 0xbc, 0x90, 0xb6, 0x10, 0x1f, 0x7b, 0xe6, 0x46, 0xbc, 0xe9,
	0x8d, 0x79, 0x87, 0xf6, 0x46, 0x71, 0x9d, 0x67, 0x97, 0x86, 0x8b, 0xbe, 0x82, 0x0d, 0x9a, 0x92,
	0x41, 0x4c, 0xfd, 0x80, 0x27, 0x09, 0x49, 0x43, 0x3f, 0x97, 0x44, 0xaa, 0x12, 0xa8, 0x17, 0x21,
	0x83, 0x1d, 0x18, 0xe8, 0x42, 0x21, 0xe8, 0x3b, 0xd8, 0x4c, 0xc8, 0xad, 0x3f, 0x28, 0x86, 0x43,
	0x2a, 0xfc, 0x9c, 0xbd, 0xa6, 0xfe, 0x80, 0x0e, 0xb9, 0xa0, 0xfe, 0x30, 0x2e, 0xf2, 0xc8, 0x2d,
	0xb7, 0x9c, 0xf6, 0x1a, 0x76, 0x13, 0x72, 0xbb, 0xaf, 0x29, 0x17, 0xec, 0x35, 0xdd, 0xd7, 0x84,
	0x23, 0x85, 0xa3, 0x53, 0xd8, 0xb0, 0xb9, 0x9a, 0x7f, 0xef, 0xba, 0xf2, 0x2e, 0xd7, 0xc8, 0xa4,
	0x69, 0x95, 0xa9, 0x7d, 0x0a, 0x2d, 0x65, 0xa6, 0xc8, 0x72, 0x29, 0x28, 0x49, 0xfc, 0x22, 0xbd,
	0x4e, 0xf9, 0x4d, 0xea, 0x07, 0x3c, 0x4d, 0x69, 0xa0, 0xd2, 0x72, 0xb7, 0xaa, 0x85, 0x37, 0xdf,
	0x12, 0xbe, 0x3a, 0x49, 0xe5, 0xd3, 0xee, 0x8f, 0x24, 0x2e, 0x28, 0xfe, 0x24, 0x21, 0xb7, 0x57,
	0x56, 0xe4, 0xca, 0x68, 0x1c, 0xcc, 0x24, 0xd0, 0x2e, 0xd8, 0x4a, 0xf8, 0x11, 0xc9, 0x23, 0x49,
	0x46, 0x23, 0x96, 0x8e, 0xdc, 0x65, 0x5d, 0xa3, 0xc7, 0x06, 0x39, 0x9e, 0x01, 0x73, 0x74, 0x75,
	0xef, 0xc2, 0xa8, 0xb8, 0xb5, 0x79, 0x3a, 0x9e, 0x01, 0x08, 0xc3, 0x8a, 0xa0, 0x24, 0xf4, 0x33,
	0x1e, 0xb3, 0x60, 0xe2, 0xd6, 0x5b, 0x4e, 0x7b, 0xbd, 0xbb, 0xf7, 0xd0, 0xee, 0xa3, 0x24, 0x3c,
	0xd7, 0x89, 0x18, 0xc4, 0xfd, 0x33, 0xea, 0x42, 0x99, 0x14, 0x32, 0x72, 0x41, 0x7f, 0xfc, 0xd6,
	0x62, 0xb1, 0x5e, 0x21, 0x23, 0xac, 0xb9, 0xcd, 0xe7, 0x50, 0x3b, 0xa5, 0x93, 0x33, 0x22, 0x83,
	0x08, 0x7d, 0x08, 0xd5, 0x4c, 0xd0, 0x21, 0xbb, 0xd5, 0x2d, 0x57, 0xc7, 0xf6, 0x84, 0x3e, 0x83,
	0x35, 0x41, 0x13, 0x3e, 0xa6, 0xbe, 0x85, 0x97, 0xf4, 0x57, 0xad, 0x9a, 0xe0, 0xb9, 0x8e, 0x35,
	0x5f, 0x01, 0xe8, 0xa1, 0x30, 0x52, 0x07, 0x50, 0xba, 0xa6, 0x13, 0xad, 0xf3, 0xf0, 0xf1, 0x9c,
	0x1a, 0x39, 0x7e, 0x84, 0x55, 0xf6, 0xfe, 0x32, 0x54, 0x12, 0x75, 0x6e, 0x7e, 0x0b, 0x2b, 0x87,
	0xb3, 0x85, 0x31, 0xb7, 0x19, 0x9c, 0xbf, 0x6e, 0x06, 0x04, 0xe5, 0x8c, 0x0b, 0x33, 0x0c, 0x6b,
	0x58, 0x3f, 0x37, 0x7f, 0x76, 0xa0, 0x7a, 0xc6, 0x84, 0xe0, 0x02, 0x1d, 0x43, 0x45, 0x28, 0x8b,
	0xd6, 0x56, 0xf7, 0x81, 0xb6, 0xe6, 0x5e, 0x8d, 0x8d, 0x00, 0xea, 0x01, 0x64, 0x54, 0x04, 0x34,
	0x95, 0x64, 0x44, 0xed, 0xec, 0x7d, 0xba, 0x58, 0xee, 0xdc, 0x70, 0xf1, 0x5c, 0x12, 0xea, 0xc2,
	0x07, 0xf4, 0x36, 0x88, 0x8b, 0x50, 0x35, 0x0c, 0x09, 0xa7, 0xa3, 0x38, 0x9d, 0xc2, 0xf7, 0x2d,
	0xa8, 0xae, 0xda, 0x8e, 0x62, 0xde, 0xfc, 0xcd, 0x81, 0x8a, 0x2e, 0xb2, 0x5a, 0x5b, 0xba, 0x34,
	0xf6, 0x53, 0xf6, 0xfe, 0xcd, 0xda, 0xd2, 0x35, 0xc6, 0x26, 0x7f, 0x56, 0x93, 0xa5, 0xff, 0x5a,
	0x93, 0x3e, 0x54, 0x13, 0x5d, 0x67, 0xbb, 0x4a, 0x77, 0x1f, 0x28, 0x65, 0x2e, 0x07, 0xdb, 0xe4,
	0x9d, 0x2b, 0x80, 0x59, 0x7b, 0x23, 0x80, 0xea, 0x59, 0xef, 0xe2, 0xb2, 0x8f, 0x1b, 0x8f, 0xd0,
	0x63, 0x58, 0x3b, 0xc7, 0xfd, 0xa3, 0x3e, 0xf6, 0x6d, 0xc8, 0x41, 0x2b, 0xb0, 0x8c, 0xfb, 0xe7,
	0x2f, 0x4e, 0x0e, 0x7a, 0x8d, 0x25, 0x84, 0x60, 0xdd, 0xe2, 0xd3, 0x58, 0x09, 0x2d, 0x43, 0xa9,
	0xf7, 0xfd, 0xcb, 0x46, 0x79, 0x67, 0x1b, 0x96, 0xed, 0x2d, 0xa0, 0x0d, 0xa8, 0x8c, 0xd5, 0x02,
	0xd0, 0xb5, 0x73, 0xb0, 0x39, 0xec, 0xfc, 0xee, 0x40, 0x45, 0x2f, 0x66, 0xf4, 0x0c, 0xca, 0x72,
	0x92, 0x19, 0x78, 0xbd, 0xfb, 0xf9, 0x3b, 0xf6, 0xb8, 0x77, 0x39, 0xc9, 0x28, 0xd6, 0x19, 0xff,
	0x47, 0x5b, 0x74, 0xa0, 0x12, 0xd2, 0x98, 0x4c, 0x74, 0x1b, 0xfc, 0xe3, 0x6a, 0x34, 0x3c, 0xd4,
	0x84, 0xda, 0x7d, 0xeb, 0xa8, 0x3f, 0x4f, 0x1d, 0xdf, 0x9f, 0x77, 0x36, 0xa1, 0xac, 0xdc, 0xa1,
	0x3a, 0x54, 0x0e, 0xfb, 0x2f, 0x7a, 0x2f, 0x1b, 0x8f, 0xd4, 0x63, 0x1f, 0xe3, 0x1f, 0x70, 0xc3,
	0xd9, 0x3f, 0xf8, 0xe9, 0x6e, 0xcb, 0xf9, 0xe5, 0x6e, 0xcb, 0x79, 0x73, 0xb7, 0xe5, 0xbc, 0xfa,
	0x7a, 0xc4, 0x64, 0x54, 0x0c, 0xbc, 0x80, 0x27, 0x1d, 0xe3, 0x75, 0x77, 0x28, 0x48, 0x42, 0x6f,
	0xb8, 0xb8, 0xb6, 0x81, 0xce, 0xdb, 0x7f, 0xf3, 0x41, 0x55, 0x1b, 0x7b, 0xfa, 0x67, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xad, 0x71, 0x81, 0x52, 0xaa, 0x08, 0x00, 0x00,
}

func (m *RedisService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Faults) > 0 {
		for iNdEx := len(m.Faults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Faults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRedisservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Redis) > 0 {
		for iNdEx := len(m.Redis) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Redis[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRedisservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Host) > 0 {
		for iNdEx := len(m.Host) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Host[iNdEx])
			copy(dAtA[i:], m.Host[iNdEx])
			i = encodeVarintRedisservice(dAtA, i, uint64(len(m.Host[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RedisService_Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisService_Settings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisService_Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ReadPolicy != 0 {
		i = encodeVarintRedisservice(dAtA, i, uint64(m.ReadPolicy))
		i--
		dAtA[i] = 0x48
	}
	if m.EnableRedirection {
		i--
		if m.EnableRedirection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.EnableHashtagging {
		i--
		if m.EnableHashtagging {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.MaxUpstreamUnknownConnections != nil {
		{
			size, err := m.MaxUpstreamUnknownConnections.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BufferFlushTimeout != nil {
		{
			size, err := m.BufferFlushTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxBufferSizeBeforeFlush != 0 {
		i = encodeVarintRedisservice(dAtA, i, uint64(m.MaxBufferSizeBeforeFlush))
		i--
		dAtA[i] = 0x20
	}
	if m.EnableCommandStats {
		i--
		if m.EnableCommandStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.OpTimeout != nil {
		{
			size, err := m.OpTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CaseInsensitive {
		i--
		if m.CaseInsensitive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RedisService_KeyMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisService_KeyMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisService_KeyMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemovePrefix {
		i--
		if m.RemovePrefix {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintRedisservice(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedisService_RouteMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisService_RouteMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisService_RouteMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Match != nil {
		{
			size := m.Match.Size()
			i -= size
			if _, err := m.Match.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RedisService_RouteMatch_Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisService_RouteMatch_Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RedisService_Destination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisService_Destination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisService_Destination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Port != 0 {
		i = encodeVarintRedisservice(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintRedisservice(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedisService_Mirror) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisService_Mirror) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisService_Mirror) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExcludeReadCommands {
		i--
		if m.ExcludeReadCommands {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Percentage != nil {
		{
			size, err := m.Percentage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedisService_Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisService_Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisService_Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mirror) > 0 {
		for iNdEx := len(m.Mirror) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mirror[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRedisservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Match != nil {
		{
			size, err := m.Match.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Percent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Percent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Percent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Fault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commands[iNdEx])
			copy(dAtA[i:], m.Commands[iNdEx])
			i = encodeVarintRedisservice(dAtA, i, uint64(len(m.Commands[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Delay != nil {
		{
			size, err := m.Delay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Percentage != nil {
		{
			size, err := m.Percentage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRedisservice(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRedisservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedisservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RedisService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Host) > 0 {
		for _, s := range m.Host {
			l = len(s)
			n += 1 + l + sovRedisservice(uint64(l))
		}
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if len(m.Redis) > 0 {
		for _, e := range m.Redis {
			l = e.Size()
			n += 1 + l + sovRedisservice(uint64(l))
		}
	}
	if len(m.Faults) > 0 {
		for _, e := range m.Faults {
			l = e.Size()
			n += 1 + l + sovRedisservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedisService_Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaseInsensitive {
		n += 2
	}
	if m.OpTimeout != nil {
		l = m.OpTimeout.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.EnableCommandStats {
		n += 2
	}
	if m.MaxBufferSizeBeforeFlush != 0 {
		n += 1 + sovRedisservice(uint64(m.MaxBufferSizeBeforeFlush))
	}
	if m.BufferFlushTimeout != nil {
		l = m.BufferFlushTimeout.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.MaxUpstreamUnknownConnections != nil {
		l = m.MaxUpstreamUnknownConnections.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.EnableHashtagging {
		n += 2
	}
	if m.EnableRedirection {
		n += 2
	}
	if m.ReadPolicy != 0 {
		n += 1 + sovRedisservice(uint64(m.ReadPolicy))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedisService_KeyMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.RemovePrefix {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedisService_RouteMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		n += m.Match.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedisService_RouteMatch_Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	return n
}
func (m *RedisService_Destination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovRedisservice(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedisService_Mirror) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.Percentage != nil {
		l = m.Percentage.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.ExcludeReadCommands {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedisService_Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if len(m.Mirror) > 0 {
		for _, e := range m.Mirror {
			l = e.Size()
			n += 1 + l + sovRedisservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Percent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Fault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRedisservice(uint64(m.Type))
	}
	if m.Percentage != nil {
		l = m.Percentage.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if m.Delay != nil {
		l = m.Delay.Size()
		n += 1 + l + sovRedisservice(uint64(l))
	}
	if len(m.Commands) > 0 {
		for _, s := range m.Commands {
			l = len(s)
			n += 1 + l + sovRedisservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRedisservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedisservice(x uint64) (n int) {
	return sovRedisservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RedisService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = append(m.Host, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &RedisService_Settings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redis = append(m.Redis, &RedisService_Route{})
			if err := m.Redis[len(m.Redis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Faults = append(m.Faults, &Fault{})
			if err := m.Faults[len(m.Faults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisService_Settings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseInsensitive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CaseInsensitive = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpTimeout == nil {
				m.OpTimeout = &types.Duration{}
			}
			if err := m.OpTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCommandStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCommandStats = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBufferSizeBeforeFlush", wireType)
			}
			m.MaxBufferSizeBeforeFlush = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBufferSizeBeforeFlush |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferFlushTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferFlushTimeout == nil {
				m.BufferFlushTimeout = &types.Duration{}
			}
			if err := m.BufferFlushTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUpstreamUnknownConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxUpstreamUnknownConnections == nil {
				m.MaxUpstreamUnknownConnections = &types.UInt32Value{}
			}
			if err := m.MaxUpstreamUnknownConnections.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHashtagging", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableHashtagging = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableRedirection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableRedirection = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPolicy", wireType)
			}
			m.ReadPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadPolicy |= RedisService_ReadPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &Auth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisService_KeyMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovePrefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemovePrefix = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRedisservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisService_RouteMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RedisService_KeyMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &RedisService_RouteMatch_Key{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisService_Destination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Destination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Destination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedisservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisService_Mirror) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mirror: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mirror: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &RedisService_Destination{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Percentage == nil {
				m.Percentage = &Percent{}
			}
			if err := m.Percentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeReadCommands", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeReadCommands = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRedisservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisService_Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &RedisService_RouteMatch{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &RedisService_Destination{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mirror", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mirror = append(m.Mirror, &RedisService_Mirror{})
			if err := m.Mirror[len(m.Mirror)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Percent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Percent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Percent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRedisservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Fault_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Percentage == nil {
				m.Percentage = &Percent{}
			}
			if err := m.Percentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delay == nil {
				m.Delay = &types.Duration{}
			}
			if err := m.Delay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedisservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedisservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedisservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedisservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRedisservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRedisservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRedisservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedisservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRedisservice = fmt.Errorf("proto: unexpected end of group")
)
