// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/redis/v1alpha1/redisdestination.proto

// RedisDestination defines policies that apply to redis traffic intended for a redis service

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	v1alpha3 "istio.io/api/networking/v1alpha3"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RedisSettings_Mode int32

const (
	RedisSettings_PROXY   RedisSettings_Mode = 0
	RedisSettings_CLUSTER RedisSettings_Mode = 1
)

var RedisSettings_Mode_name = map[int32]string{
	0: "PROXY",
	1: "CLUSTER",
}

var RedisSettings_Mode_value = map[string]int32{
	"PROXY":   0,
	"CLUSTER": 1,
}

func (x RedisSettings_Mode) String() string {
	return proto.EnumName(RedisSettings_Mode_name, int32(x))
}

func (RedisSettings_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_237e307d114723c1, []int{5, 0}
}

// RedisDestination defines policies that apply to redis traffic intended for a redis service
//
// <!-- crd generation tags
// +cue-gen:RedisDestination:groupName:redis.aeraki.io
// +cue-gen:RedisDestination:version:v1alpha1
// +cue-gen:RedisDestination:storageVersion
// +cue-gen:RedisDestination:subresource:status
// +cue-gen:RedisDestination:scope:Namespaced
// +cue-gen:RedisDestination:resource:categories=redis-aeraki-io,shortNames=rd
// +cue-gen:RedisDestination:printerColumn:name=Host,type=string,JSONPath=.spec.host,description="The name of a service from the service registry"
// +cue-gen:RedisDestination:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp
// representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
// +cue-gen:RedisDestination:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=redis.aeraki.io/v1alpha1
// +genclient
// +k8s:deepcopy-gen=true
// -->
type RedisDestination struct {
	Host                 string         `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	TrafficPolicy        *TrafficPolicy `protobuf:"bytes,2,opt,name=traffic_policy,json=trafficPolicy,proto3" json:"traffic_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RedisDestination) Reset()         { *m = RedisDestination{} }
func (m *RedisDestination) String() string { return proto.CompactTextString(m) }
func (*RedisDestination) ProtoMessage()    {}
func (*RedisDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_237e307d114723c1, []int{0}
}
func (m *RedisDestination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisDestination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisDestination.Merge(m, src)
}
func (m *RedisDestination) XXX_Size() int {
	return m.Size()
}
func (m *RedisDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisDestination.DiscardUnknown(m)
}

var xxx_messageInfo_RedisDestination proto.InternalMessageInfo

func (m *RedisDestination) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RedisDestination) GetTrafficPolicy() *TrafficPolicy {
	if m != nil {
		return m.TrafficPolicy
	}
	return nil
}

// Connection pool settings for an upstream host. The settings apply to
// each individual host in the upstream service.
type ConnectionPoolSettings struct {
	Tcp                  *v1alpha3.ConnectionPoolSettings_TCPSettings `protobuf:"bytes,1,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Redis                *RedisSettings                               `protobuf:"bytes,2,opt,name=redis,proto3" json:"redis,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ConnectionPoolSettings) Reset()         { *m = ConnectionPoolSettings{} }
func (m *ConnectionPoolSettings) String() string { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings) ProtoMessage()    {}
func (*ConnectionPoolSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_237e307d114723c1, []int{1}
}
func (m *ConnectionPoolSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionPoolSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionPoolSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionPoolSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionPoolSettings.Merge(m, src)
}
func (m *ConnectionPoolSettings) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionPoolSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionPoolSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionPoolSettings proto.InternalMessageInfo

func (m *ConnectionPoolSettings) GetTcp() *v1alpha3.ConnectionPoolSettings_TCPSettings {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *ConnectionPoolSettings) GetRedis() *RedisSettings {
	if m != nil {
		return m.Redis
	}
	return nil
}

// Auth provide a way to get redis auth token.
type Auth struct {
	// Types that are valid to be assigned to Auth:
	//	*Auth_Secret
	//	*Auth_Plain
	Auth                 isAuth_Auth `protobuf_oneof:"auth"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Auth) Reset()         { *m = Auth{} }
func (m *Auth) String() string { return proto.CompactTextString(m) }
func (*Auth) ProtoMessage()    {}
func (*Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_237e307d114723c1, []int{2}
}
func (m *Auth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auth.Merge(m, src)
}
func (m *Auth) XXX_Size() int {
	return m.Size()
}
func (m *Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_Auth.DiscardUnknown(m)
}

var xxx_messageInfo_Auth proto.InternalMessageInfo

type isAuth_Auth interface {
	isAuth_Auth()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Auth_Secret struct {
	Secret *SecretReference `protobuf:"bytes,1,opt,name=secret,proto3,oneof" json:"secret,omitempty"`
}
type Auth_Plain struct {
	Plain *PlainAuth `protobuf:"bytes,2,opt,name=plain,proto3,oneof" json:"plain,omitempty"`
}

func (*Auth_Secret) isAuth_Auth() {}
func (*Auth_Plain) isAuth_Auth()  {}

func (m *Auth) GetAuth() isAuth_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Auth) GetSecret() *SecretReference {
	if x, ok := m.GetAuth().(*Auth_Secret); ok {
		return x.Secret
	}
	return nil
}

func (m *Auth) GetPlain() *PlainAuth {
	if x, ok := m.GetAuth().(*Auth_Plain); ok {
		return x.Plain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Auth) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Auth_Secret)(nil),
		(*Auth_Plain)(nil),
	}
}

type SecretReference struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PasswordField        string   `protobuf:"bytes,2,opt,name=password_field,json=passwordField,proto3" json:"password_field,omitempty"`
	UsernameField        string   `protobuf:"bytes,3,opt,name=username_field,json=usernameField,proto3" json:"username_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecretReference) Reset()         { *m = SecretReference{} }
func (m *SecretReference) String() string { return proto.CompactTextString(m) }
func (*SecretReference) ProtoMessage()    {}
func (*SecretReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_237e307d114723c1, []int{3}
}
func (m *SecretReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecretReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretReference.Merge(m, src)
}
func (m *SecretReference) XXX_Size() int {
	return m.Size()
}
func (m *SecretReference) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretReference.DiscardUnknown(m)
}

var xxx_messageInfo_SecretReference proto.InternalMessageInfo

func (m *SecretReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecretReference) GetPasswordField() string {
	if m != nil {
		return m.PasswordField
	}
	return ""
}

func (m *SecretReference) GetUsernameField() string {
	if m != nil {
		return m.UsernameField
	}
	return ""
}

type PlainAuth struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlainAuth) Reset()         { *m = PlainAuth{} }
func (m *PlainAuth) String() string { return proto.CompactTextString(m) }
func (*PlainAuth) ProtoMessage()    {}
func (*PlainAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_237e307d114723c1, []int{4}
}
func (m *PlainAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlainAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlainAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlainAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlainAuth.Merge(m, src)
}
func (m *PlainAuth) XXX_Size() int {
	return m.Size()
}
func (m *PlainAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_PlainAuth.DiscardUnknown(m)
}

var xxx_messageInfo_PlainAuth proto.InternalMessageInfo

func (m *PlainAuth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *PlainAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type RedisSettings struct {
	Mode                 RedisSettings_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=redis.aeraki.io.v1alpha1.RedisSettings_Mode" json:"mode,omitempty"`
	Auth                 *Auth              `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	DiscoveryEndpoints   []string           `protobuf:"bytes,3,rep,name=discovery_endpoints,json=discoveryEndpoints,proto3" json:"discovery_endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RedisSettings) Reset()         { *m = RedisSettings{} }
func (m *RedisSettings) String() string { return proto.CompactTextString(m) }
func (*RedisSettings) ProtoMessage()    {}
func (*RedisSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_237e307d114723c1, []int{5}
}
func (m *RedisSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisSettings.Merge(m, src)
}
func (m *RedisSettings) XXX_Size() int {
	return m.Size()
}
func (m *RedisSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisSettings.DiscardUnknown(m)
}

var xxx_messageInfo_RedisSettings proto.InternalMessageInfo

func (m *RedisSettings) GetMode() RedisSettings_Mode {
	if m != nil {
		return m.Mode
	}
	return RedisSettings_PROXY
}

func (m *RedisSettings) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *RedisSettings) GetDiscoveryEndpoints() []string {
	if m != nil {
		return m.DiscoveryEndpoints
	}
	return nil
}

type TrafficPolicy struct {
	ConnectionPool       *ConnectionPoolSettings `protobuf:"bytes,1,opt,name=connection_pool,json=connectionPool,proto3" json:"connection_pool,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TrafficPolicy) Reset()         { *m = TrafficPolicy{} }
func (m *TrafficPolicy) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicy) ProtoMessage()    {}
func (*TrafficPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_237e307d114723c1, []int{6}
}
func (m *TrafficPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicy.Merge(m, src)
}
func (m *TrafficPolicy) XXX_Size() int {
	return m.Size()
}
func (m *TrafficPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicy proto.InternalMessageInfo

func (m *TrafficPolicy) GetConnectionPool() *ConnectionPoolSettings {
	if m != nil {
		return m.ConnectionPool
	}
	return nil
}

func init() {
	proto.RegisterEnum("redis.aeraki.io.v1alpha1.RedisSettings_Mode", RedisSettings_Mode_name, RedisSettings_Mode_value)
	proto.RegisterType((*RedisDestination)(nil), "redis.aeraki.io.v1alpha1.RedisDestination")
	proto.RegisterType((*ConnectionPoolSettings)(nil), "redis.aeraki.io.v1alpha1.ConnectionPoolSettings")
	proto.RegisterType((*Auth)(nil), "redis.aeraki.io.v1alpha1.Auth")
	proto.RegisterType((*SecretReference)(nil), "redis.aeraki.io.v1alpha1.SecretReference")
	proto.RegisterType((*PlainAuth)(nil), "redis.aeraki.io.v1alpha1.PlainAuth")
	proto.RegisterType((*RedisSettings)(nil), "redis.aeraki.io.v1alpha1.RedisSettings")
	proto.RegisterType((*TrafficPolicy)(nil), "redis.aeraki.io.v1alpha1.TrafficPolicy")
}

func init() {
	proto.RegisterFile("api/redis/v1alpha1/redisdestination.proto", fileDescriptor_237e307d114723c1)
}

var fileDescriptor_237e307d114723c1 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0x66, 0x69, 0x41, 0x7a, 0x48, 0x0b, 0x19, 0x13, 0x6d, 0x88, 0x29, 0x64, 0x8d, 0x11, 0x12,
	0x9d, 0x85, 0x72, 0xe1, 0x85, 0xc1, 0x08, 0x15, 0xc3, 0x85, 0x4a, 0x33, 0x60, 0x22, 0xde, 0x34,
	0xd3, 0xdd, 0x69, 0x77, 0x64, 0x3b, 0xb3, 0x99, 0x99, 0x85, 0x10, 0x5f, 0xc2, 0xc7, 0xf0, 0x51,
	0xbc, 0xf4, 0xca, 0x6b, 0xc2, 0x93, 0x98, 0x9d, 0xd9, 0x2d, 0xe5, 0xa7, 0xd1, 0xbb, 0x99, 0x73,
	0xbe, 0xef, 0x7c, 0xdf, 0x39, 0x73, 0x32, 0xb0, 0x41, 0x53, 0x1e, 0x28, 0x16, 0x71, 0x1d, 0x9c,
	0x6d, 0xd1, 0x24, 0x8d, 0xe9, 0x96, 0xbb, 0x46, 0x4c, 0x1b, 0x2e, 0xa8, 0xe1, 0x52, 0xe0, 0x54,
	0x49, 0x23, 0x51, 0xd3, 0xc6, 0x31, 0x65, 0x8a, 0x9e, 0x72, 0xcc, 0x25, 0x2e, 0x09, 0x2b, 0x4f,
	0x86, 0x52, 0x0e, 0x13, 0x16, 0x58, 0x5c, 0x3f, 0x1b, 0x04, 0xda, 0xa8, 0x2c, 0x34, 0x8e, 0xb7,
	0xd2, 0xba, 0x9d, 0x8d, 0x32, 0x35, 0x51, 0xf7, 0x6e, 0xfe, 0x5c, 0xd1, 0x34, 0x65, 0x4a, 0x17,
	0xf9, 0xd5, 0x22, 0x9f, 0x3b, 0x1d, 0x70, 0x96, 0x44, 0xbd, 0x3e, 0x8b, 0xe9, 0x19, 0x97, 0xaa,
	0x00, 0xbc, 0xe2, 0xda, 0x70, 0x89, 0xb9, 0xb4, 0x10, 0xc1, 0xcc, 0xb9, 0x54, 0xa7, 0x5c, 0x0c,
	0xcb, 0x8e, 0xb6, 0x83, 0x89, 0x66, 0x7a, 0x2a, 0x4b, 0x98, 0x23, 0xfa, 0xdf, 0x61, 0x99, 0xe4,
	0x3d, 0xbd, 0xbb, 0x4e, 0xa3, 0xc7, 0x50, 0x8d, 0xa5, 0x36, 0x4d, 0x6f, 0xcd, 0x5b, 0xaf, 0xed,
	0x55, 0x2e, 0x77, 0x67, 0x89, 0x0d, 0xa0, 0x4f, 0xd0, 0x30, 0x8a, 0x0e, 0x06, 0x3c, 0xec, 0xa5,
	0x32, 0xe1, 0xe1, 0x45, 0x73, 0x76, 0xcd, 0x5b, 0x5f, 0x6c, 0x3f, 0xc7, 0xd3, 0xe6, 0x82, 0x8f,
	0x1d, 0xbe, 0x6b, 0xe1, 0xa4, 0x6e, 0x26, 0xaf, 0xfe, 0x4f, 0x0f, 0x1e, 0x75, 0xa4, 0x10, 0x2c,
	0xcc, 0x75, 0xbb, 0x52, 0x26, 0x47, 0xcc, 0x18, 0x2e, 0x86, 0x1a, 0x1d, 0x42, 0xc5, 0x84, 0xa9,
	0xb5, 0xb0, 0xd8, 0xde, 0xc1, 0xae, 0xbd, 0xeb, 0xbe, 0x4a, 0x81, 0x6d, 0x7c, 0x3f, 0x1f, 0x1f,
	0x77, 0xba, 0xe5, 0x99, 0xe4, 0x95, 0xd0, 0x0e, 0xcc, 0x59, 0x93, 0xff, 0xb6, 0x6c, 0xe7, 0x31,
	0x26, 0x3b, 0x96, 0xff, 0xc3, 0x83, 0xea, 0x6e, 0x66, 0x62, 0xd4, 0x81, 0x79, 0xcd, 0x42, 0xc5,
	0x4c, 0xe1, 0x6d, 0x63, 0x7a, 0xa1, 0x23, 0x8b, 0x23, 0x6c, 0xc0, 0x14, 0x13, 0x21, 0x3b, 0x98,
	0x21, 0x05, 0x15, 0xbd, 0x86, 0xb9, 0x34, 0xa1, 0x5c, 0x14, 0x66, 0x9e, 0x4e, 0xaf, 0xd1, 0xcd,
	0x61, 0xb9, 0xf0, 0xc1, 0x0c, 0x71, 0x9c, 0xbd, 0x79, 0xa8, 0xd2, 0xcc, 0xc4, 0xbe, 0x86, 0xa5,
	0x5b, 0x0a, 0x08, 0x41, 0x55, 0xd0, 0x11, 0x73, 0x2f, 0x47, 0xec, 0x19, 0x3d, 0x83, 0x46, 0x4a,
	0xb5, 0x3e, 0x97, 0x2a, 0xea, 0xd9, 0xdd, 0xb1, 0xa2, 0x35, 0x52, 0x2f, 0xa3, 0xef, 0xf3, 0x60,
	0x0e, 0xcb, 0x34, 0x53, 0x39, 0xa5, 0x80, 0x55, 0x1c, 0xac, 0x8c, 0x5a, 0x98, 0x7f, 0x00, 0xb5,
	0xb1, 0x25, 0xb4, 0x0a, 0x0b, 0x65, 0x91, 0xc9, 0x65, 0x19, 0x07, 0xd1, 0x0a, 0x2c, 0x94, 0xf4,
	0x42, 0x75, 0x7c, 0xf7, 0xff, 0x78, 0x50, 0xbf, 0x31, 0x6a, 0xf4, 0x16, 0xaa, 0x23, 0x19, 0x39,
	0xf7, 0x8d, 0xf6, 0x8b, 0xff, 0x7c, 0x21, 0xfc, 0x51, 0x46, 0x8c, 0x58, 0x26, 0x6a, 0xbb, 0xd1,
	0x14, 0x63, 0x6d, 0x4d, 0xaf, 0x90, 0xdb, 0x27, 0x16, 0x8b, 0x02, 0x78, 0x18, 0x71, 0x1d, 0xca,
	0x33, 0xa6, 0x2e, 0x7a, 0x4c, 0x44, 0xa9, 0xe4, 0xc2, 0xe8, 0x66, 0x65, 0xad, 0xb2, 0x5e, 0x23,
	0x68, 0x9c, 0xda, 0x2f, 0x33, 0x7e, 0x0b, 0xaa, 0xb9, 0x24, 0xaa, 0xc1, 0x5c, 0x97, 0x1c, 0x7e,
	0x39, 0x59, 0x9e, 0x41, 0x8b, 0xf0, 0xa0, 0xf3, 0xe1, 0xf3, 0xd1, 0xf1, 0x3e, 0x59, 0xf6, 0xfc,
	0x6f, 0x50, 0xbf, 0xb1, 0xf5, 0xe8, 0x04, 0x96, 0xc2, 0xf1, 0x96, 0xf6, 0x52, 0x29, 0x93, 0x62,
	0x77, 0x36, 0xa7, 0x1b, 0xbc, 0x7f, 0xad, 0x49, 0x23, 0xbc, 0x11, 0xdf, 0x7b, 0xf3, 0xeb, 0xaa,
	0xe5, 0xfd, 0xbe, 0x6a, 0x79, 0x97, 0x57, 0x2d, 0xef, 0xeb, 0xe6, 0x90, 0x9b, 0x38, 0xeb, 0xe3,
	0x50, 0x8e, 0x02, 0x57, 0xf3, 0xe5, 0x88, 0xe9, 0xb8, 0x38, 0x07, 0x77, 0xff, 0xb9, 0xfe, 0xbc,
	0xfd, 0x05, 0xb6, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x95, 0x13, 0x2f, 0xd6, 0x04, 0x05, 0x00,
	0x00,
}

func (m *RedisDestination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisDestination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisDestination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TrafficPolicy != nil {
		{
			size, err := m.TrafficPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisdestination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintRedisdestination(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionPoolSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionPoolSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionPoolSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Redis != nil {
		{
			size, err := m.Redis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisdestination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Tcp != nil {
		{
			size, err := m.Tcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisdestination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Auth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Auth != nil {
		{
			size := m.Auth.Size()
			i -= size
			if _, err := m.Auth.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Auth_Secret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auth_Secret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Secret != nil {
		{
			size, err := m.Secret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisdestination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Auth_Plain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auth_Plain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Plain != nil {
		{
			size, err := m.Plain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisdestination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SecretReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UsernameField) > 0 {
		i -= len(m.UsernameField)
		copy(dAtA[i:], m.UsernameField)
		i = encodeVarintRedisdestination(dAtA, i, uint64(len(m.UsernameField)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PasswordField) > 0 {
		i -= len(m.PasswordField)
		copy(dAtA[i:], m.PasswordField)
		i = encodeVarintRedisdestination(dAtA, i, uint64(len(m.PasswordField)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRedisdestination(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlainAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlainAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlainAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintRedisdestination(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintRedisdestination(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedisSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DiscoveryEndpoints) > 0 {
		for iNdEx := len(m.DiscoveryEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DiscoveryEndpoints[iNdEx])
			copy(dAtA[i:], m.DiscoveryEndpoints[iNdEx])
			i = encodeVarintRedisdestination(dAtA, i, uint64(len(m.DiscoveryEndpoints[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisdestination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mode != 0 {
		i = encodeVarintRedisdestination(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TrafficPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrafficPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConnectionPool != nil {
		{
			size, err := m.ConnectionPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedisdestination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRedisdestination(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedisdestination(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RedisDestination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	if m.TrafficPolicy != nil {
		l = m.TrafficPolicy.Size()
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectionPoolSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tcp != nil {
		l = m.Tcp.Size()
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	if m.Redis != nil {
		l = m.Redis.Size()
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Auth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auth != nil {
		n += m.Auth.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Auth_Secret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secret != nil {
		l = m.Secret.Size()
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	return n
}
func (m *Auth_Plain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plain != nil {
		l = m.Plain.Size()
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	return n
}
func (m *SecretReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	l = len(m.PasswordField)
	if l > 0 {
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	l = len(m.UsernameField)
	if l > 0 {
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlainAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedisSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovRedisdestination(uint64(m.Mode))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	if len(m.DiscoveryEndpoints) > 0 {
		for _, s := range m.DiscoveryEndpoints {
			l = len(s)
			n += 1 + l + sovRedisdestination(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrafficPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectionPool != nil {
		l = m.ConnectionPool.Size()
		n += 1 + l + sovRedisdestination(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRedisdestination(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedisdestination(x uint64) (n int) {
	return sovRedisdestination(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RedisDestination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisdestination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisDestination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisDestination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrafficPolicy == nil {
				m.TrafficPolicy = &TrafficPolicy{}
			}
			if err := m.TrafficPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisdestination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionPoolSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisdestination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionPoolSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionPoolSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tcp == nil {
				m.Tcp = &v1alpha3.ConnectionPoolSettings_TCPSettings{}
			}
			if err := m.Tcp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Redis == nil {
				m.Redis = &RedisSettings{}
			}
			if err := m.Redis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisdestination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisdestination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SecretReference{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Auth = &Auth_Secret{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlainAuth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Auth = &Auth_Plain{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisdestination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisdestination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsernameField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisdestination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlainAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisdestination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlainAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlainAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisdestination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisdestination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= RedisSettings_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &Auth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryEndpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveryEndpoints = append(m.DiscoveryEndpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisdestination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedisdestination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedisdestination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectionPool == nil {
				m.ConnectionPool = &ConnectionPoolSettings{}
			}
			if err := m.ConnectionPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedisdestination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedisdestination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedisdestination(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedisdestination
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedisdestination
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedisdestination
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRedisdestination
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRedisdestination
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRedisdestination        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedisdestination          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRedisdestination = fmt.Errorf("proto: unexpected end of group")
)
