# Copyright Aeraki Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trpc-sample-server-v1
  labels:
    app: trpc-sample-server
spec:
  selector:
    matchLabels:
      app: trpc-sample-server
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
        sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
      labels:
        app: trpc-sample-server
        version: v1
    spec:
      containers:
        - name: trpc-sample-server
          image: ghcr.io/aeraki-mesh/trpc-server
          ports:
            - containerPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trpc-sample-server-v2
  labels:
    app: trpc-sample-server
spec:
  selector:
    matchLabels:
      app: trpc-sample-server
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
        sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
      labels:
        app: trpc-sample-server
        version: v2
    spec:
      containers:
        - name: trpc-sample-server
          image: ghcr.io/aeraki-mesh/trpc-server
          ports:
            - containerPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trpc-sample-client-unary
  labels:
    app: trpc-sample-client-unary
spec:
  selector:
    matchLabels:
      app: trpc-sample-client-unary
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
        sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
      labels:
        app: trpc-sample-client-unary
    spec:
      containers:
        - name: trpc-sample-client
          image: ghcr.io/aeraki-mesh/trpc-client
          env:
            - name: version
              value: "v1"  # The version field is the transparent transmission field of trpc, which can cooperate with metarouter-multi-route.yaml to realize the function of multi-version routing
            - name: server_addr
              value: "trpc-sample-server:8000"
            - name: cmd
              value: "SayHello"  # 测试客户端流式请求 "SayHelloClientStream"  测试服务器流式请求 "SayHelloServerStream"  测试双向流式请求 "SayHelloBidirectionStream"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trpc-sample-client-stream
  labels:
    app: trpc-sample-client-stream
spec:
  selector:
    matchLabels:
      app: trpc-sample-client-stream
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
        sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
      labels:
        app: trpc-sample-client-stream
    spec:
      containers:
        - name: trpc-sample-client
          image: ghcr.io/aeraki-mesh/trpc-client
          env:
            - name: version
              value: "v1"  # The version field is the transparent transmission field of trpc, which can cooperate with metarouter-multi-route.yaml to realize the function of multi-version routing
            - name: server_addr
              value: "trpc-sample-server:8000"
            - name: cmd
              value: "SayHelloClientStream"  # 测试客户端流式请求 "SayHelloClientStream"  测试服务器流式请求 "SayHelloServerStream"  测试双向流式请求 "SayHelloBidirectionStream"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trpc-sample-server-stream
  labels:
    app: trpc-sample-server-stream
spec:
  selector:
    matchLabels:
      app: trpc-sample-server-stream
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
        sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
      labels:
        app: trpc-sample-server-stream
    spec:
      containers:
        - name: trpc-sample-client
          image: ghcr.io/aeraki-mesh/trpc-client
          env:
            - name: version
              value: "v1"  # The version field is the transparent transmission field of trpc, which can cooperate with metarouter-multi-route.yaml to realize the function of multi-version routing
            - name: server_addr
              value: "trpc-sample-server:8000"
            - name: cmd
              value: "SayHelloServerStream"  # 测试客户端流式请求 "SayHelloClientStream"  测试服务器流式请求 "SayHelloServerStream"  测试双向流式请求 "SayHelloBidirectionStream"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trpc-sample-client-bidirection-stream
  labels:
    app: trpc-sample-client-bidirection-stream
spec:
  selector:
    matchLabels:
      app: trpc-sample-client-bidirection-stream
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
        sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
      labels:
        app: trpc-sample-client-bidirection-stream
    spec:
      containers:
        - name: trpc-sample-client
          image: ghcr.io/aeraki-mesh/trpc-client
          env:
            - name: version
              value: "v1"  # The version field is the transparent transmission field of trpc, which can cooperate with metarouter-multi-route.yaml to realize the function of multi-version routing
            - name: server_addr
              value: "trpc-sample-server:8000"
            - name: cmd
              value: "SayHelloBidirectionStream"  # 测试客户端流式请求 "SayHelloClientStream"  测试服务器流式请求 "SayHelloServerStream"  测试双向流式请求 "SayHelloBidirectionStream"
---
apiVersion: v1
kind: Service
metadata:
  name: trpc-sample-server
spec:
  selector:
    app: trpc-sample-server
  ports:
    - name: tcp-metaprotocol-trpc-server
      protocol: TCP
      port: 8000
      targetPort: 8000
